"""
SMART RAG Agent 2025 - Qwen3 Function Calling
–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞
"""

import gradio as gr
from rag_advanced_memory import AdvancedRAGMemory
import os
import json
import re
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_agent.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ—Ç –∂–µ –∫—Ä–∞—Å–∏–≤—ã–π CSS
MODERN_CSS = """
/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

* {
    font-family: 'Inter', sans-serif !important;
}

/* –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º - –±–æ—Ä–¥–æ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π */
body {
    background: linear-gradient(135deg, #8B0000 0%, #4B0082 50%, #8B008B 100%) !important;
    background-attachment: fixed !important;
    position: relative;
    overflow-y: auto !important;
    overflow-x: hidden !important;
    min-height: 100vh !important;
}

.gradio-container {
    background: rgba(255, 255, 255, 0.1) !important;
    backdrop-filter: blur(10px) !important;
    border-radius: 30px !important;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37) !important;
    border: 1px solid rgba(255, 255, 255, 0.18) !important;
    margin: 20px auto !important;
    padding: 30px !important;
    max-width: 95vw !important;
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ */
.gr-box, .gr-form, .gr-panel {
    background: rgba(255, 255, 255, 0.08) !important;
    backdrop-filter: blur(20px) !important;
    border-radius: 20px !important;
    border: 1px solid rgba(255, 255, 255, 0.15) !important;
    padding: 20px !important;
}

/* –ò–Ω–ø—É—Ç—ã */
.gr-input, .gr-textbox, textarea, input {
    background: rgba(255, 255, 255, 0.1) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    border-radius: 15px !important;
    color: white !important;
    padding: 12px 16px !important;
}

/* –ö–Ω–æ–ø–∫–∏ */
.gr-button {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1)) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    border-radius: 15px !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 12px 24px !important;
    transition: all 0.3s !important;
}

.gr-button:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.2)) !important;
    transform: translateY(-2px);
}

.gr-button-primary {
    background: linear-gradient(135deg, #8B0000 0%, #8B008B 100%) !important;
    border: none !important;
}

/* –õ–µ–π–±–ª—ã */
label, .gr-label {
    color: rgba(255, 255, 255, 0.9) !important;
    font-weight: 600 !important;
}

/* Markdown */
.markdown-text, .gr-markdown {
    color: rgba(255, 255, 255, 0.95) !important;
}
"""


class SmartQwenAgent:
    """
    –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Qwen3 —Å function calling
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ RAG –∏ GREP
    """

    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.ULTIMATE_DB_PATH = self.project_dir / "chroma_db_ultimate"
        self.DEFAULT_TEXT_FILE = str(self.project_dir / "cosmic_texts.txt")
        self.EMBEDDING_MODEL = "intfloat/multilingual-e5-large"  # Ultimate –º–æ–¥–µ–ª—å

        self.rag = None
        self.is_initialized = False
        self.conversation_history = []  # –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!

        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è Qwen3
        self.tools_schema = [
            {
                "type": "function",
                "function": {
                    "name": "grep_search",
                    "description": "–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤, —Ç–µ—Ä–º–∏–Ω–æ–≤, —á–∞—Å—Ç–æ—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫ (fuzzy) - –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –¥–∞–∂–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä '–ú–µ–∫—Ç–∞–±—É' –Ω–∞–π–¥–µ—Ç '–ú–µ–∫—Ç –∞–±—É').",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è –∫–∞–Ω–∞–ª–∞, —Ç–µ—Ä–º–∏–Ω)"
                            },
                            "context_lines": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ (default: 5)",
                                "default": 5
                            }
                        },
                        "required": ["query"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "rag_semantic_search",
                    "description": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª—É (–Ω–µ —Ç–æ—á–Ω—ã–º —Å–ª–æ–≤–∞–º). –•–æ—Ä–æ—à–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç...', '–¥–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è...', '–∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è...'",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"
                            },
                            "num_sources": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (1-100, default: 20)",
                                "default": 20
                            }
                        },
                        "required": ["query"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "expand_query",
                    "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å —á—Ç–æ —Ç–µ—Ä–º–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –±–∞–∑–µ (–æ–ø–µ—á–∞—Ç–∫–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è).",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "term": {
                                "type": "string",
                                "description": "–¢–µ—Ä–º–∏–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                            }
                        },
                        "required": ["term"]
                    }
                }
            }
        ]

    def auto_load_ultimate_db(self, progress=gr.Progress()):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ultimate –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        logger.info("="*70)
        logger.info("AUTO-LOADING ULTIMATE DATABASE")

        try:
            if not self.ULTIMATE_DB_PATH.exists():
                return "‚ùå Ultimate –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ create_ultimate_db.py"

            progress(0.1, desc="üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Ultimate –±–∞–∑—ã...")
            logger.info(f"Loading from: {self.ULTIMATE_DB_PATH}")

            # –°–æ–∑–¥–∞–µ–º RAG —Å ultimate –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.rag = AdvancedRAGMemory(
                text_file_path=self.DEFAULT_TEXT_FILE,
                db_path=str(self.ULTIMATE_DB_PATH),
                embedding_model=self.EMBEDDING_MODEL,
                max_short_memory=10,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                max_context_tokens=16000,  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è RTX 3090
                summarize_threshold=11000,
                enable_auto_summarize=True,
                use_gpu=True
            )

            progress(0.4, desc="üß† –ó–∞–≥—Ä—É–∑–∫–∞ embedding –º–æ–¥–µ–ª–∏ (2.2GB)...")

            from langchain_community.vectorstores import Chroma
            self.rag.vectorstore = Chroma(
                persist_directory=str(self.ULTIMATE_DB_PATH),
                embedding_function=self.rag.embeddings
            )

            progress(0.7, desc="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qwen3...")
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Qwen3 —á–µ—Ä–µ–∑ LM Studio
            self.rag.setup_lm_studio_llm(model_name="qwen/qwen3-30b-a3b-2507")

            progress(0.9, desc="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retriever...")
            self.rag.create_qa_chain(retriever_k=20, use_mmr=True)

            self.is_initialized = True
            progress(1.0, desc="‚úÖ –ì–æ—Ç–æ–≤–æ!")

            logger.info("‚úÖ Ultimate –±–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("="*70)

            return f"""‚úÖ SMART Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üóÑÔ∏è –ë–∞–∑–∞: Ultimate (intfloat/multilingual-e5-large)
üß† –ú–æ–¥–µ–ª—å: Qwen3-30B-A3B (function calling)
üíæ –ü–∞–º—è—Ç—å: 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö + –∞–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç: 16000 —Ç–æ–∫–µ–Ω–æ–≤ (–º–∞–∫—Å–∏–º—É–º –¥–ª—è RTX 3090)

ü§ñ Qwen3 —Å–∞–º —Ä–µ—à–∏—Ç –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!"""

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def unload_database(self):
        """–í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            if self.rag:
                del self.rag
                self.rag = None

            import gc
            gc.collect()

            self.is_initialized = False
            logger.info("–ë–∞–∑–∞ –≤—ã–≥—Ä—É–∂–µ–Ω–∞")

            return "‚úÖ –ë–∞–∑–∞ –≤—ã–≥—Ä—É–∂–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rag_web_modern.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö –±–∞–∑."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏: {str(e)}"

    def grep_search(self, query: str, context_lines: int = 5):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å fuzzy"""
        logger.info(f"[TOOL] grep_search: '{query}'")

        try:
            text_file = self.rag.text_file_path
            with open(text_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            # Fuzzy –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            stopwords = {'—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–¥–ª—è', '—Ä–∞–±–æ—Ç—ã', '–∫–∞–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç–∞'}
            words = re.findall(r'\b[–∞-—è—ë–ê-–Ø–Å]{3,}\b', query.lower())
            keywords = [w for w in words if w not in stopwords]

            if not keywords:
                pattern = re.compile(re.escape(query), re.IGNORECASE)
            else:
                fuzzy_words = []
                for keyword in keywords[:3]:
                    chars = list(keyword)
                    fuzzy_word = ''.join([re.escape(c) + r'[\s\-]*' for c in chars[:-1]]) + re.escape(chars[-1])
                    fuzzy_words.append(fuzzy_word)
                fuzzy_pattern = '|'.join([f'\\b{fw}\\b' for fw in fuzzy_words])
                pattern = re.compile(fuzzy_pattern, re.IGNORECASE)

            results = []
            for i, line in enumerate(lines):
                if pattern.search(line):
                    start = max(0, i - context_lines)
                    end = min(len(lines), i + context_lines + 1)
                    context = ''.join(lines[start:end])
                    results.append({
                        'line_num': i + 1,
                        'context': context[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                        'matched_line': line.strip()[:200]
                    })

                    if len(results) >= 15:  # –ú–∞–∫—Å–∏–º—É–º 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        break

            logger.info(f"[TOOL] grep_search: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

            return {
                "found": len(results),
                "results": results[:10],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                "total": len(results)
            }

        except Exception as e:
            logger.error(f"[TOOL] grep_search error: {e}")
            return {"error": str(e)}

    def rag_semantic_search(self, query: str, num_sources: int = 20):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        logger.info(f"[TOOL] rag_semantic_search: '{query}', sources={num_sources}")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º search_kwargs
            search_kwargs = {
                "k": num_sources,
                "fetch_k": num_sources * 3,
                "lambda_mult": 0.5
            }
            self.rag.retriever.search_kwargs = search_kwargs

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            docs = self.rag.retriever.get_relevant_documents(query)

            results = []
            for doc in docs:
                results.append({
                    "content": doc.page_content[:400],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                    "metadata": doc.metadata
                })

            logger.info(f"[TOOL] rag_semantic_search: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

            return {
                "found": len(results),
                "documents": results
            }

        except Exception as e:
            logger.error(f"[TOOL] rag_semantic_search error: {e}")
            return {"error": str(e)}

    def expand_query(self, term: str):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
        logger.info(f"[TOOL] expand_query: '{term}'")

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        term_lower = term.lower()

        # –¢–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        variants = [term]

        # –£–±–∏—Ä–∞–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã
        if '-' in term:
            variants.append(term.replace('-', ''))
            variants.append(term.replace('-', ' '))

        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏–π (–ú–µ–∫—Ç–∞–±—É ‚Üí –ú–µ–∫—Ç–∞–±–∞, –ú–µ–∫—Ç–∞–±)
        if term_lower.endswith('—É'):
            variants.append(term[:-1] + '–∞')
            variants.append(term[:-1])

        logger.info(f"[TOOL] expand_query: –≤–∞—Ä–∏–∞–Ω—Ç—ã {variants}")

        return {
            "original": term,
            "variants": list(set(variants))
        }

    def ask_smart_question(self, question: str, progress=gr.Progress()):
        """
        –£–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å Qwen3 function calling
        """
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", "", ""

        if not question.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!", "", ""

        logger.info("="*70)
        logger.info(f"SMART QUESTION: {question}")

        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Qwen3
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –ø–æ–∏—Å–∫–∞.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –†–µ—à–∏—Ç—å –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã (grep_search, rag_semantic_search, expand_query)
3. –í—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
4. –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
- grep_search: –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤, —Ç–µ—Ä–º–∏–Ω–æ–≤ (—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)
- rag_semantic_search: –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª—É
- expand_query: –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å –æ–ø–µ—á–∞—Ç–∫–∏ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è

–°—Ç—Ä–∞—Ç–µ–≥–∏—è:
1. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª - —Å–Ω–∞—á–∞–ª–∞ grep_search(–∏–º—è –∫–∞–Ω–∞–ª–∞)
2. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç - rag_semantic_search(–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
3. –ï—Å–ª–∏ –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Å–¥–µ–ª–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
4. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º!"""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ]

            tool_calls_history = []
            max_iterations = 7  # –ú–∞–∫—Å–∏–º—É–º 7 –∏—Ç–µ—Ä–∞—Ü–∏–π

            progress(0.1, desc="üß† Qwen3 –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫...")

            for iteration in range(max_iterations):
                logger.info(f"--- Iteration {iteration + 1} ---")

                # –ó–∞–ø—Ä–æ—Å –∫ Qwen3
                response = self.rag.llm_client.chat.completions.create(
                    model="qwen/qwen3-30b-a3b-2507",
                    messages=messages,
                    tools=self.tools_schema,
                    tool_choice="auto",
                    temperature=0.3,  # –ù–∏–∑–∫–∞—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    max_tokens=4000
                )

                assistant_message = response.choices[0].message

                # Qwen3 —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?
                if assistant_message.tool_calls:
                    progress(0.3 + iteration * 0.1, desc=f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({iteration + 1})...")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    messages.append({
                        "role": "assistant",
                        "content": assistant_message.content,
                        "tool_calls": [
                            {
                                "id": tc.id,
                                "type": "function",
                                "function": {
                                    "name": tc.function.name,
                                    "arguments": tc.function.arguments
                                }
                            }
                            for tc in assistant_message.tool_calls
                        ]
                    })

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    for tool_call in assistant_message.tool_calls:
                        function_name = tool_call.function.name
                        arguments = json.loads(tool_call.function.arguments)

                        logger.info(f"Calling: {function_name}({arguments})")

                        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        if function_name == "grep_search":
                            result = self.grep_search(**arguments)
                        elif function_name == "rag_semantic_search":
                            result = self.rag_semantic_search(**arguments)
                        elif function_name == "expand_query":
                            result = self.expand_query(**arguments)
                        else:
                            result = {"error": "Unknown function"}

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        tool_calls_history.append({
                            "tool": function_name,
                            "args": arguments,
                            "result": result
                        })

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                        messages.append({
                            "role": "tool",
                            "tool_call_id": tool_call.id,
                            "content": json.dumps(result, ensure_ascii=False)
                        })

                    continue  # –°–ª–µ–¥—É—é—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

                else:
                    # Qwen3 –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    progress(0.9, desc="‚ú® –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")

                    final_answer = assistant_message.content

                    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¢–û–õ–¨–ö–û —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    self.rag.add_to_memory(question, final_answer)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
                    tools_used = "\n".join([
                        f"üîß {i+1}. {tc['tool']}({', '.join([f'{k}={v}' for k, v in tc['args'].items()])})"
                        for i, tc in enumerate(tool_calls_history)
                    ])

                    memory_stats = self.rag.get_memory_stats()
                    memory_info = f"""üíæ –ü–∞–º—è—Ç—å: {memory_stats['short_memory_count']} –¥–∏–∞–ª–æ–≥–æ–≤ | {memory_stats['long_memory_count']} —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls_history)}
üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration + 1}"""

                    logger.info(f"FINAL ANSWER LENGTH: {len(final_answer)} chars")
                    logger.info("="*70)

                    progress(1.0, desc="‚úÖ –ì–æ—Ç–æ–≤–æ!")

                    return final_answer, tools_used, memory_info

            # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π (7). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.", "", ""

        except Exception as e:
            logger.error(f"ERROR: {str(e)}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "", ""

    def get_memory_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"

        stats = self.rag.get_memory_stats()
        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMART Agent

üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {stats['session_duration']}
üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_questions']}
üìù –í –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏: {stats['short_memory_count']}
üìö –í –¥–æ–ª–≥–æ–π –ø–∞–º—è—Ç–∏: {stats['long_memory_count']}

üíæ –ë–∞–∑–∞: Ultimate (multilingual-e5-large)
üß† –ú–æ–¥–µ–ª—å: Qwen3-30B-A3B
‚öôÔ∏è –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if stats['auto_summarize_enabled'] else '‚ùå'}"""

    def clear_memory(self, keep_summaries: bool):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"
        return f"‚úÖ {self.rag.clear_memory(keep_summaries=keep_summaries)}"

    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", None

        filename = f"smart_conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        filepath = self.project_dir / filename
        result = self.rag.export_conversation(str(filepath))
        return f"‚úÖ {result}", str(filepath)

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        with gr.Blocks(css=MODERN_CSS, title="SMART RAG Agent 2025", theme=gr.themes.Soft()) as interface:

            gr.Markdown("""
            # üß† SMART RAG Agent 2025
            ### Qwen3 —Å Function Calling - –£–º–Ω—ã–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–∏—Å–∫
            """)

            # –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            with gr.Row():
                init_status = gr.Textbox(
                    label="üöÄ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                    lines=8,
                    interactive=False,
                    value="‚è≥ –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å SMART Agent' –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Ultimate –±–∞–∑—ã"
                )

            with gr.Row():
                init_btn = gr.Button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å SMART Agent", variant="primary", size="lg")
                unload_btn = gr.Button("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", size="lg")

            gr.Markdown("---")

            # –ß–∞—Ç
            gr.Markdown("### üí¨ –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥")

            with gr.Row():
                with gr.Column(scale=2):
                    question_input = gr.Textbox(
                        label="üí≠ –í–∞—à –≤–æ–ø—Ä–æ—Å",
                        placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ - Qwen3 —Å–∞–º —Ä–µ—à–∏—Ç –∫–∞–∫ –∏—Å–∫–∞—Ç—å...",
                        lines=3
                    )
                    ask_btn = gr.Button("‚ú® –°–ø—Ä–æ—Å–∏—Ç—å", variant="primary", size="lg")

                with gr.Column(scale=3):
                    answer_output = gr.Textbox(
                        label="ü§ñ –û—Ç–≤–µ—Ç SMART Agent",
                        lines=18,
                        interactive=False
                    )

            with gr.Row():
                tools_output = gr.Textbox(label="üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", lines=4, interactive=False)
                memory_info = gr.Textbox(label="üìä –ü–∞–º—è—Ç—å", lines=4, interactive=False)

            gr.Markdown("---")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
            gr.Markdown("### üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")

            with gr.Row():
                stats_btn = gr.Button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", size="lg")
                clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∏)", size="lg")
                clear_all_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", variant="stop", size="lg")

            stats_output = gr.Textbox(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", lines=8, interactive=False)

            with gr.Row():
                export_btn = gr.Button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", size="lg")

            export_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞", lines=2)
            export_file = gr.File(label="–°–∫–∞—á–∞—Ç—å")

            gr.Markdown("""
            ---
            ### üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

            **Qwen3 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**
            - üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å
            - üîç –í—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (GREP/RAG)
            - üîÑ –î–µ–ª–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            - ‚ú® –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

            **–í –ø–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)**

            **–î–æ—Å—Ç—É–ø–Ω–æ 3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:**
            1. `grep_search` - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å fuzzy
            2. `rag_semantic_search` - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            3. `expand_query` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            """)

            # Events
            init_btn.click(self.auto_load_ultimate_db, outputs=[init_status])
            unload_btn.click(self.unload_database, outputs=[init_status])

            ask_btn.click(
                self.ask_smart_question,
                inputs=[question_input],
                outputs=[answer_output, tools_output, memory_info]
            )
            question_input.submit(
                self.ask_smart_question,
                inputs=[question_input],
                outputs=[answer_output, tools_output, memory_info]
            )

            stats_btn.click(self.get_memory_stats, outputs=[stats_output])
            clear_btn.click(lambda: self.clear_memory(True), outputs=[stats_output])
            clear_all_btn.click(lambda: self.clear_memory(False), outputs=[stats_output])
            export_btn.click(self.export_history, outputs=[export_status, export_file])

        return interface


def main():
    agent = SmartQwenAgent()
    interface = agent.create_interface()

    print("="*70)
    print("üß† SMART RAG Agent 2025 - Qwen3 Function Calling")
    print("="*70)
    print("‚ú® –£–º–Ω—ã–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("üóÑÔ∏è –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Ultimate –±–∞–∑—ã (intfloat/multilingual-e5-large)")
    print("üíæ –í –ø–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    print("="*70)

    interface.launch(server_name="0.0.0.0", server_port=7861, share=False, show_error=True)


if __name__ == "__main__":
    main()
