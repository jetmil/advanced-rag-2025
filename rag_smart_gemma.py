"""
SMART RAG Agent 2025 - Gemma3 Function Calling
–£–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞
"""

import gradio as gr
from rag_advanced_memory import AdvancedRAGMemory
import os
import json
import re
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_agent.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ!)
logging.getLogger('openai').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

# –¢–æ—Ç –∂–µ –∫—Ä–∞—Å–∏–≤—ã–π CSS
MODERN_CSS = """
/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

* {
    font-family: 'Inter', sans-serif !important;
}

/* –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º - –±–æ—Ä–¥–æ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π */
body {
    background: linear-gradient(135deg, #8B0000 0%, #4B0082 50%, #8B008B 100%) !important;
    background-attachment: fixed !important;
    position: relative;
    overflow-y: auto !important;
    overflow-x: hidden !important;
    min-height: 100vh !important;
}

.gradio-container {
    background: rgba(255, 255, 255, 0.1) !important;
    backdrop-filter: blur(10px) !important;
    border-radius: 30px !important;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37) !important;
    border: 1px solid rgba(255, 255, 255, 0.18) !important;
    margin: 20px auto !important;
    padding: 30px !important;
    max-width: 95vw !important;
}

/* –ö–∞—Ä—Ç–æ—á–∫–∏ */
.gr-box, .gr-form, .gr-panel {
    background: rgba(255, 255, 255, 0.08) !important;
    backdrop-filter: blur(20px) !important;
    border-radius: 20px !important;
    border: 1px solid rgba(255, 255, 255, 0.15) !important;
    padding: 20px !important;
}

/* –ò–Ω–ø—É—Ç—ã */
.gr-input, .gr-textbox, textarea, input {
    background: rgba(255, 255, 255, 0.1) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    border-radius: 15px !important;
    color: white !important;
    padding: 12px 16px !important;
}

/* –ö–Ω–æ–ø–∫–∏ */
.gr-button {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1)) !important;
    backdrop-filter: blur(10px) !important;
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    border-radius: 15px !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 12px 24px !important;
    transition: all 0.3s !important;
}

.gr-button:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.2)) !important;
    transform: translateY(-2px);
}

.gr-button-primary {
    background: linear-gradient(135deg, #8B0000 0%, #8B008B 100%) !important;
    border: none !important;
}

/* –õ–µ–π–±–ª—ã */
label, .gr-label {
    color: rgba(255, 255, 255, 0.9) !important;
    font-weight: 600 !important;
}

/* Markdown */
.markdown-text, .gr-markdown {
    color: rgba(255, 255, 255, 0.95) !important;
}
"""


class SmartQwenAgent:
    """
    –£–º–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Gemma3 —Å function calling
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ RAG –∏ GREP
    """

    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.ULTIMATE_DB_PATH = self.project_dir / "chroma_db_ultimate"
        self.DEFAULT_TEXT_FILE = str(self.project_dir / "cosmic_texts.txt")
        self.EMBEDDING_MODEL = "intfloat/multilingual-e5-large"  # Ultimate –º–æ–¥–µ–ª—å

        self.rag = None
        self.is_initialized = False
        self.conversation_history = []  # –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!

        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è Gemma3
        self.tools_schema = [
            {
                "type": "function",
                "function": {
                    "name": "grep_search",
                    "description": "–¢–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤, —Ç–µ—Ä–º–∏–Ω–æ–≤, —á–∞—Å—Ç–æ—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫ (fuzzy) - –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –¥–∞–∂–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä '–ú–µ–∫—Ç–∞–±—É' –Ω–∞–π–¥–µ—Ç '–ú–µ–∫—Ç –∞–±—É').",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è –∫–∞–Ω–∞–ª–∞, —Ç–µ—Ä–º–∏–Ω)"
                            },
                            "context_lines": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ (default: 5)",
                                "default": 5
                            }
                        },
                        "required": ["query"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "rag_semantic_search",
                    "description": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫. –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª—É (–Ω–µ —Ç–æ—á–Ω—ã–º —Å–ª–æ–≤–∞–º). –•–æ—Ä–æ—à–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç...', '–¥–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è...', '–∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è...'",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"
                            },
                            "num_sources": {
                                "type": "integer",
                                "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (1-100, default: 20)",
                                "default": 20
                            }
                        },
                        "required": ["query"]
                    }
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "expand_query",
                    "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å —á—Ç–æ —Ç–µ—Ä–º–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –±–∞–∑–µ (–æ–ø–µ—á–∞—Ç–∫–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è).",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "term": {
                                "type": "string",
                                "description": "–¢–µ—Ä–º–∏–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                            }
                        },
                        "required": ["term"]
                    }
                }
            }
        ]

    def auto_load_ultimate_db(self, progress=gr.Progress()):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ultimate –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        logger.info("="*70)
        logger.info("AUTO-LOADING ULTIMATE DATABASE")

        try:
            if not self.ULTIMATE_DB_PATH.exists():
                return "‚ùå Ultimate –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ create_ultimate_db.py"

            progress(0.1, desc="üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Ultimate –±–∞–∑—ã...")
            logger.info(f"Loading from: {self.ULTIMATE_DB_PATH}")

            # –°–æ–∑–¥–∞–µ–º RAG —Å ultimate –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.rag = AdvancedRAGMemory(
                text_file_path=self.DEFAULT_TEXT_FILE,
                db_path=str(self.ULTIMATE_DB_PATH),
                embedding_model=self.EMBEDDING_MODEL,
                max_short_memory=10,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                max_context_tokens=20000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 20000 —Ç–æ–∫–µ–Ω–æ–≤
                summarize_threshold=14000,  # 70% –æ—Ç 20000
                enable_auto_summarize=True,
                use_gpu=True
            )

            progress(0.4, desc="üß† –ó–∞–≥—Ä—É–∑–∫–∞ embedding –º–æ–¥–µ–ª–∏ (2.2GB)...")

            from langchain_community.vectorstores import Chroma
            self.rag.vectorstore = Chroma(
                persist_directory=str(self.ULTIMATE_DB_PATH),
                embedding_function=self.rag.embeddings
            )

            progress(0.7, desc="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemma3...")
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Gemma3 —á–µ—Ä–µ–∑ LM Studio
            self.rag.setup_lm_studio_llm(model_name="google/gemma-3-27b")

            progress(0.9, desc="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retriever...")
            self.rag.create_qa_chain(retriever_k=20, use_mmr=True)

            self.is_initialized = True
            progress(1.0, desc="‚úÖ –ì–æ—Ç–æ–≤–æ!")

            logger.info("‚úÖ Ultimate –±–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("="*70)

            return f"""‚úÖ SMART Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üóÑÔ∏è –ë–∞–∑–∞: Ultimate (intfloat/multilingual-e5-large)
üß† –ú–æ–¥–µ–ª—å: Gemma 3-27B (function calling)
üíæ –ü–∞–º—è—Ç—å: 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö + –∞–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç: 20000 —Ç–æ–∫–µ–Ω–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π!)
üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: –¥–æ 15 (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 10-–π)
üí™ –†–µ—Å—É—Ä—Å—ã: –ú–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä - –±–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π!

ü§ñ Gemma3 —Å–∞–º —Ä–µ—à–∏—Ç –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!
‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ - –º–µ–Ω—å—à–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è!"""

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def unload_database(self):
        """–í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            if self.rag:
                del self.rag
                self.rag = None

            import gc
            gc.collect()

            self.is_initialized = False
            logger.info("–ë–∞–∑–∞ –≤—ã–≥—Ä—É–∂–µ–Ω–∞")

            return "‚úÖ –ë–∞–∑–∞ –≤—ã–≥—Ä—É–∂–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å rag_web_modern.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö –±–∞–∑."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏: {str(e)}"

    def grep_search(self, query: str, context_lines: int = 5):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å fuzzy"""
        logger.info(f"[TOOL] grep_search: '{query}'")

        try:
            text_file = self.rag.text_file_path
            with open(text_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            # Fuzzy –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            stopwords = {'—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–¥–ª—è', '—Ä–∞–±–æ—Ç—ã', '–∫–∞–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç–∞'}
            words = re.findall(r'\b[–∞-—è—ë–ê-–Ø–Å]{3,}\b', query.lower())
            keywords = [w for w in words if w not in stopwords]

            if not keywords:
                pattern = re.compile(re.escape(query), re.IGNORECASE)
            else:
                fuzzy_words = []
                for keyword in keywords[:3]:
                    chars = list(keyword)
                    fuzzy_word = ''.join([re.escape(c) + r'[\s\-]*' for c in chars[:-1]]) + re.escape(chars[-1])
                    fuzzy_words.append(fuzzy_word)
                fuzzy_pattern = '|'.join([f'\\b{fw}\\b' for fw in fuzzy_words])
                pattern = re.compile(fuzzy_pattern, re.IGNORECASE)

            results = []
            for i, line in enumerate(lines):
                if pattern.search(line):
                    start = max(0, i - context_lines)
                    end = min(len(lines), i + context_lines + 1)
                    context = ''.join(lines[start:end])
                    results.append({
                        'line_num': i + 1,
                        'context': context[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                        'matched_line': line.strip()[:200]
                    })

                    if len(results) >= 15:  # –ú–∞–∫—Å–∏–º—É–º 15 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        break

            logger.info(f"[TOOL] grep_search: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")

            return {
                "found": len(results),
                "results": results,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–æ 15)
                "total": len(results),
                "message": f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞." if len(results) > 0 else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
            }

        except Exception as e:
            logger.error(f"[TOOL] grep_search error: {e}")
            return {"error": str(e)}

    def rag_semantic_search(self, query: str, num_sources: int = 20):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        logger.info(f"[TOOL] rag_semantic_search: '{query}', sources={num_sources}")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º search_kwargs
            search_kwargs = {
                "k": num_sources,
                "fetch_k": num_sources * 3,
                "lambda_mult": 0.5
            }
            self.rag.retriever.search_kwargs = search_kwargs

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            docs = self.rag.retriever.get_relevant_documents(query)

            results = []
            full_docs = []  # –ü–æ–ª–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            for doc in docs:
                results.append({
                    "content": doc.page_content[:400],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    "metadata": doc.metadata
                })
                full_docs.append(doc.page_content)  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            # –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø: –µ—Å—Ç—å –ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
            relevance_check = self._check_topic_relevance(query, full_docs)

            logger.info(f"[TOOL] rag_semantic_search: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            logger.info(f"[TOOL] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {relevance_check}")

            return {
                "found": len(results),
                "documents": results,
                "relevance_warning": relevance_check,  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
                "message": f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!" if len(results) >= 5 else f"–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –ù–û –õ–£–ß–®–ï –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–µ–≥–æ—Å—è."
            }

        except Exception as e:
            logger.error(f"[TOOL] rag_semantic_search error: {e}")
            return {"error": str(e)}

    def _check_topic_relevance(self, query: str, documents: list) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        query_lower = query.lower()

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        religious_keywords = ['–ø—Ä–∞–≤–æ—Å–ª–∞–≤', '—Ü–µ—Ä–∫–æ–≤', '–±–æ–≥–æ—Å–ª—É–∂', '–∫–∞–Ω–æ–Ω', '–ª–∏—Ç—É—Ä–≥–∏', '–º–æ–ª–µ–±–µ–Ω', '—Å–æ–±–æ—Ä', '—Ö—Ä–∞–º']
        esoteric_keywords = ['–∫–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç', '–∫–∞–Ω–∞–ª', '—á–∞—Å—Ç–æ—Ç', '—ç–Ω–µ—Ä–≥–∏', '—ç–∑–æ—Ç–µ—Ä–∏–∫', '–º–∞–≥–∏—á–µ—Å–∫', '–æ–±—Ä—è–¥', '—Ä–∏—Ç—É–∞–ª']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        is_religious_query = any(kw in query_lower for kw in religious_keywords)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        doc_text = ' '.join(documents).lower()
        has_esoteric_content = any(kw in doc_text for kw in esoteric_keywords)
        has_religious_content = any(kw in doc_text for kw in religious_keywords)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if is_religious_query and has_esoteric_content and not has_religious_content:
            return "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–ø—Ä–æ—Å –ø—Ä–æ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã –≠–ó–û–¢–ï–†–ò–ß–ï–°–ö–ò–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ!"
        elif is_religious_query and not has_esoteric_content and not has_religious_content:
            return "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –±–∞–∑–µ –ù–ï–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–π —Ç–µ–º–µ. –°–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ!"

        return "OK"  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ

    def expand_query(self, term: str):
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤"""
        logger.info(f"[TOOL] expand_query: '{term}'")

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        term_lower = term.lower()

        # –¢–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        variants = [term]

        # –£–±–∏—Ä–∞–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã
        if '-' in term:
            variants.append(term.replace('-', ''))
            variants.append(term.replace('-', ' '))

        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏–π (–ú–µ–∫—Ç–∞–±—É ‚Üí –ú–µ–∫—Ç–∞–±–∞, –ú–µ–∫—Ç–∞–±)
        if term_lower.endswith('—É'):
            variants.append(term[:-1] + '–∞')
            variants.append(term[:-1])

        logger.info(f"[TOOL] expand_query: –≤–∞—Ä–∏–∞–Ω—Ç—ã {variants}")

        return {
            "original": term,
            "variants": list(set(variants))
        }

    def ask_smart_question(self, question: str, progress=gr.Progress()):
        """
        –£–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å Gemma3 function calling
        """
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", "", ""

        if not question.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!", "", ""

        logger.info("="*70)
        logger.info(f"SMART QUESTION: {question}")

        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemma3 —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
            system_prompt = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –ø–æ –≠–ó–û–¢–ï–†–ò–ö–ï –ò –ö–û–°–ú–û–≠–ù–ï–†–ì–ï–¢–ò–ö–ï.

‚ö†Ô∏è –°–û–î–ï–†–ñ–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:
- –ö–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–§–∏—Ä–∞—Å—Ç, –ó–µ–≤—Å, –ê–Ω–∞–∫–æ–Ω–¥–∞, –®–∞–æ–Ω –∏ –¥—Ä.)
- –≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –æ–±—Ä—è–¥—ã
- –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Ç—É–∞–ª—ã –∏ –∑–∞–≥–æ–≤–æ—Ä—ã
- –†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏—è–º–∏
- –ù–ï–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö!

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ (–ú–ê–ö–°–ò–ú–£–ú 2-3 —Ä–∞–∑–∞!)
3. –û—Ç–≤–µ—Ç–∏—Ç—å –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –ß–ï–°–¢–ù–û —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º!

üìã –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
- grep_search: —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤, —Ç–µ—Ä–º–∏–Ω–æ–≤
- rag_semantic_search: –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–º—ã—Å–ª—É
- expand_query: –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –†–ï–î–ö–û)

‚ö° –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ò–°–ö–ê:
1. –í–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:
   ‚Üí rag_semantic_search(–Ω–∞–∑–≤–∞–Ω–∏–µ + –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, num_sources=30)
   ‚Üí –î–∞—Ç—å –æ—Ç–≤–µ—Ç!

2. –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
   ‚Üí rag_semantic_search(—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, num_sources=50)
   ‚Üí –î–∞—Ç—å –æ—Ç–≤–µ—Ç!

3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ < 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
   ‚Üí –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å grep_search –ò–õ–ò –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å
   ‚Üí –ú–∞–∫—Å–∏–º—É–º 3 –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!

üö´ –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ó–ê–ü–†–ï–¢–´:
1. –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!
2. –ù–ï –î–û–î–£–ú–´–í–ê–ô –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–≤–æ–∏—Ö –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π!
3. –ù–ï –ò–ù–¢–ï–†–ü–†–ï–¢–ò–†–£–ô —ç–∑–æ—Ç–µ—Ä–∏–∫—É –∫–∞–∫ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!
4. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ù–ï –ø–æ —Ç–µ–º–µ –±–∞–∑—ã - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏!

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç:
"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –∏ –∫–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ.
–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '[—Ç–µ–º–∞]' –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∫–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö."

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢ –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç:
"–í –±–∞–∑–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä—è–¥–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å [—Ç–µ–º–∞], –Ω–æ —ç—Ç–æ –ù–ï –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ [—Ä–µ–ª–∏–≥–∏—è] –ø—Ä–∞–∫—Ç–∏–∫–∏.
–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª: [–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á—Ç–æ —ç—Ç–æ —ç–∑–æ—Ç–µ—Ä–∏–∫–∞]"

üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –¥–µ–ª–∞–π –±–æ–ª—å—à–µ 3 –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –õ—É—á—à–µ —Å–∫–∞–∑–∞—Ç—å "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç" —á–µ–º –≤—ã–¥—É–º–∞—Ç—å
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –≠–ó–û–¢–ï–†–ò–ß–ï–°–ö–ê–Ø
- –ü–æ–∫–∞–∑—ã–≤–∞–π –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–∑ –∫–∞–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"""

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ]

            tool_calls_history = []
            max_iterations = 15  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 –∏—Ç–µ—Ä–∞—Ü–∏–π (—É –≤–∞—Å –º–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä!)
            force_stop_threshold = 10  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 10-–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

            progress(0.1, desc="üß† Gemma3 –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫...")

            for iteration in range(max_iterations):
                logger.info(f"--- Iteration {iteration + 1} ---")

                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
                # iteration –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ 10-–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º >= 9
                if iteration >= (force_stop_threshold - 1):
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls_history)}")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É—é—â–µ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    messages.append({
                        "role": "system",
                        "content": f"–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1} –∏–∑ {max_iterations}. –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {len(tool_calls_history)} –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–ï –≤—ã–∑—ã–≤–∞–π –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!"
                    })

                # –ó–∞–ø—Ä–æ—Å –∫ Gemma3
                response = self.rag.llm_client.chat.completions.create(
                    model="google/gemma-3-27b",
                    messages=messages,
                    tools=self.tools_schema,
                    tool_choice="none" if iteration >= (force_stop_threshold - 1) else "auto",  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ
                    temperature=0.3,  # –ù–∏–∑–∫–∞—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    max_tokens=4000
                )

                assistant_message = response.choices[0].message

                # Gemma3 —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?
                if assistant_message.tool_calls:
                    progress(0.3 + iteration * 0.1, desc=f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ({iteration + 1})...")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    messages.append({
                        "role": "assistant",
                        "content": assistant_message.content,
                        "tool_calls": [
                            {
                                "id": tc.id,
                                "type": "function",
                                "function": {
                                    "name": tc.function.name,
                                    "arguments": tc.function.arguments
                                }
                            }
                            for tc in assistant_message.tool_calls
                        ]
                    })

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    for tool_call in assistant_message.tool_calls:
                        function_name = tool_call.function.name
                        arguments = json.loads(tool_call.function.arguments)

                        logger.info(f"Calling: {function_name}({arguments})")

                        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        if function_name == "grep_search":
                            result = self.grep_search(**arguments)
                        elif function_name == "rag_semantic_search":
                            result = self.rag_semantic_search(**arguments)
                        elif function_name == "expand_query":
                            result = self.expand_query(**arguments)
                        else:
                            result = {"error": "Unknown function"}

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        tool_calls_history.append({
                            "tool": function_name,
                            "args": arguments,
                            "result": result
                        })

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                        messages.append({
                            "role": "tool",
                            "tool_call_id": tool_call.id,
                            "content": json.dumps(result, ensure_ascii=False)
                        })

                    continue  # –°–ª–µ–¥—É—é—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

                else:
                    # Gemma3 –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    progress(0.9, desc="‚ú® –°–∏–Ω—Ç–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")

                    final_answer = assistant_message.content

                    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¢–û–õ–¨–ö–û —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    self.rag.short_memory.append({
                        "question": question,
                        "answer": final_answer,
                        "timestamp": datetime.now().isoformat()
                    })

                    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
                    used_documents = []
                    for tc in tool_calls_history:
                        if tc['tool'] == 'rag_semantic_search' and 'result' in tc:
                            docs = tc['result'].get('documents', [])
                            used_documents.extend(docs[:5])  # –ü–µ—Ä–≤—ã–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ HTML —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    formatted_answer = self._format_answer_html(final_answer, used_documents, tool_calls_history)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –≤ HTML
                    tools_html = self._format_tools_html(tool_calls_history)

                    memory_stats = self.rag.get_memory_stats()
                    memory_html = f"""<div style='padding: 10px;'>
                    <p><b>üíæ –ü–∞–º—è—Ç—å:</b> {memory_stats['short_memory_count']} –¥–∏–∞–ª–æ–≥–æ–≤ | {memory_stats['long_memory_count']} —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</p>
                    <p><b>üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</b> {len(tool_calls_history)}</p>
                    <p><b>üìä –ò—Ç–µ—Ä–∞—Ü–∏–π:</b> {iteration + 1}</p>
                    </div>"""

                    logger.info(f"FINAL ANSWER LENGTH: {len(final_answer)} chars")
                    logger.info("="*70)

                    progress(1.0, desc="‚úÖ –ì–æ—Ç–æ–≤–æ!")

                    return formatted_answer, tools_html, memory_html

            # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π
            return f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π ({max_iterations}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", "", ""

        except Exception as e:
            logger.error(f"ERROR: {str(e)}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "", ""

    def _format_answer_html(self, answer: str, documents: list, tools_history: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ HTML —Å –ø–æ–∫–∞–∑–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        import html

        # Escape HTML –≤ –æ—Ç–≤–µ—Ç–µ
        answer_escaped = html.escape(answer).replace('\n', '<br>')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        for tool in tools_history:
            if 'result' in tool and 'relevance_warning' in tool['result']:
                warning = tool['result']['relevance_warning']
                if warning != "OK":
                    warnings.append(warning)

        warnings_html = ""
        if warnings:
            warnings_html = f"""
            <div class='warning-box'>
                <b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b><br>
                {"<br>".join(set(warnings))}
            </div>
            """

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources_html = ""
        if documents:
            sources_html = "<div style='margin-top: 20px;'><hr style='border: 1px solid rgba(255,255,255,0.2);'><h4>üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</h4>"
            for i, doc in enumerate(documents[:5], 1):
                content = html.escape(doc.get('content', '')[:200])
                sources_html += f"""
                <div class='source-doc'>
                    <b>–ò—Å—Ç–æ—á–Ω–∏–∫ {i}:</b><br>
                    <small>{content}...</small>
                </div>
                """
            sources_html += "</div>"

        return f"""
        <div style='padding: 20px; max-height: 600px; overflow-y: auto;' class='scroll-to-bottom'>
            {warnings_html}
            <div style='line-height: 1.6;'>
                {answer_escaped}
            </div>
            {sources_html}
        </div>
        <script>
            // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            setTimeout(() => {{
                const container = document.querySelector('.scroll-to-bottom');
                if (container) {{
                    container.scrollTop = container.scrollHeight;
                }}
            }}, 100);
        </script>
        """

    def _format_tools_html(self, tools_history: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –≤ HTML"""
        if not tools_history:
            return "<div style='color: rgba(255,255,255,0.6); padding: 10px;'>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å</div>"

        tools_html = "<div style='padding: 10px;'>"
        for i, tool in enumerate(tools_history, 1):
            tool_name = tool['tool']
            args = tool['args']
            result = tool.get('result', {})

            # –ò–∫–æ–Ω–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            icon = "üîç" if tool_name == "grep_search" else "üß†" if tool_name == "rag_semantic_search" else "üîÑ"

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            found = result.get('found', 0) if isinstance(result, dict) else 'N/A'

            args_str = ', '.join([f"{k}={v}" for k, v in args.items()])

            tools_html += f"""
            <div style='margin: 5px 0; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 5px;'>
                <b>{icon} {i}. {tool_name}</b><br>
                <small>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {args_str}</small><br>
                <small>–ù–∞–π–¥–µ–Ω–æ: {found}</small>
            </div>
            """

        tools_html += "</div>"
        return tools_html

    def get_memory_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"

        stats = self.rag.get_memory_stats()
        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SMART Agent

üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {stats['session_duration']}
üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_questions']}
üìù –í –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏: {stats['short_memory_count']}
üìö –í –¥–æ–ª–≥–æ–π –ø–∞–º—è—Ç–∏: {stats['long_memory_count']}

üíæ –ë–∞–∑–∞: Ultimate (multilingual-e5-large)
üß† –ú–æ–¥–µ–ª—å: Gemma 3-27B
‚öôÔ∏è –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if stats['auto_summarize_enabled'] else '‚ùå'}"""

    def clear_memory(self, keep_summaries: bool):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"
        return f"‚úÖ {self.rag.clear_memory(keep_summaries=keep_summaries)}"

    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", None

        filename = f"smart_conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        filepath = self.project_dir / filename
        result = self.rag.export_conversation(str(filepath))
        return f"‚úÖ {result}", str(filepath)

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å HTML –∏ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        with gr.Blocks(css=MODERN_CSS, title="SMART RAG Agent 2025", theme=gr.themes.Soft(), head="""
        <style>
        /* –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ */
        .scroll-to-bottom {
            scroll-behavior: smooth;
        }
        /* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */
        .source-doc {
            background: rgba(139, 0, 139, 0.1);
            border-left: 3px solid #8B008B;
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
        }
        /* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */
        .warning-box {
            background: rgba(255, 165, 0, 0.2);
            border: 2px solid orange;
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
        }
        </style>
        <script>
        // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
        function scrollToAnswer() {
            setTimeout(() => {
                const answerBox = document.querySelector('[data-testid="textbox"]');
                if (answerBox) {
                    answerBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            }, 300);
        }
        </script>
        """) as interface:

            gr.HTML("""
            <div style='text-align: center; padding: 20px;'>
                <h1 style='background: linear-gradient(135deg, #8B0000, #8B008B); -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-size: 3em; margin: 0;'>
                    üß† SMART RAG Agent 2025
                </h1>
                <h3 style='color: rgba(255,255,255,0.8); margin-top: 10px;'>
                    Gemma3 Function Calling ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                </h3>
            </div>
            """)

            # –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            with gr.Row():
                init_status = gr.HTML(
                    value="""<div class='warning-box' style='text-align: center;'>
                    ‚è≥ <b>–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å SMART Agent' –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Ultimate –±–∞–∑—ã</b>
                    </div>"""
                )

            with gr.Row():
                init_btn = gr.Button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å SMART Agent", variant="primary", size="lg")
                unload_btn = gr.Button("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", size="lg")

            gr.Markdown("---")

            # –ß–∞—Ç
            gr.Markdown("### üí¨ –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥")

            with gr.Row():
                with gr.Column(scale=2):
                    question_input = gr.Textbox(
                        label="üí≠ –í–∞—à –≤–æ–ø—Ä–æ—Å",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞–Ω–∞–ª –§–∏—Ä–∞—Å—Ç' –∏–ª–∏ '–∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∑–∞—â–∏—Ç—ã?'",
                        lines=3
                    )
                    ask_btn = gr.Button("‚ú® –°–ø—Ä–æ—Å–∏—Ç—å", variant="primary", size="lg")

                with gr.Column(scale=3):
                    answer_output = gr.HTML(
                        label="ü§ñ –û—Ç–≤–µ—Ç SMART Agent",
                        value="<div style='padding: 20px; text-align: center; color: rgba(255,255,255,0.6);'>–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ—Ç–≤–µ—Ç...</div>"
                    )

            with gr.Row():
                tools_output = gr.HTML(
                    label="üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    value="<div style='color: rgba(255,255,255,0.6);'>–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö...</div>"
                )
                memory_info = gr.HTML(
                    label="üìä –ü–∞–º—è—Ç—å",
                    value="<div style='color: rgba(255,255,255,0.6);'>–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏...</div>"
                )

            gr.Markdown("---")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
            gr.Markdown("### üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")

            with gr.Row():
                stats_btn = gr.Button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", size="lg")
                clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∏)", size="lg")
                clear_all_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", variant="stop", size="lg")

            stats_output = gr.Textbox(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", lines=8, interactive=False)

            with gr.Row():
                export_btn = gr.Button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", size="lg")

            export_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞", lines=2)
            export_file = gr.File(label="–°–∫–∞—á–∞—Ç—å")

            gr.HTML("""
            <div style='padding: 20px; background: rgba(255,255,255,0.05); border-radius: 15px; margin-top: 20px;'>
            <h3>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>

            <h4>ü§ñ Gemma3 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</h4>
            <ul style='line-height: 1.8;'>
                <li>üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å</li>
                <li>üîç –í—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (GREP/RAG)</li>
                <li>üîÑ –î–µ–ª–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ</li>
                <li>‚ú® –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</li>
            </ul>

            <h4>üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π (NEW!):</h4>
            <ul style='line-height: 1.8;'>
                <li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–µ—Ç —á—Ç–æ –≤ –±–∞–∑–µ - —ç–∑–æ—Ç–µ—Ä–∏–∫–∞ –∏ –∫–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞</li>
                <li>‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞</li>
                <li>‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∏–∑ —Ç–æ–π –æ–±–ª–∞—Å—Ç–∏</li>
                <li>‚úÖ –ü–æ–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</li>
                <li>‚úÖ –ß–µ—Å—Ç–Ω–æ–µ "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç" –≤–º–µ—Å—Ç–æ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è</li>
            </ul>

            <h4>üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç:</h4>
            <ul style='line-height: 1.8;'>
                <li>üîÆ –ö–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–§–∏—Ä–∞—Å—Ç, –ó–µ–≤—Å, –ê–Ω–∞–∫–æ–Ω–¥–∞...)</li>
                <li>‚ö° –≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –æ–±—Ä—è–¥—ã</li>
                <li>üåü –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Ç—É–∞–ª—ã</li>
                <li>‚ùå –ù–ï–¢ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫!</li>
            </ul>

            <h4>üîß –î–æ—Å—Ç—É–ø–Ω–æ 3 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:</h4>
            <ol style='line-height: 1.8;'>
                <li><code>grep_search</code> - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å fuzzy</li>
                <li><code>rag_semantic_search</code> - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫</li>
                <li><code>expand_query</code> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è</li>
            </ol>

            <p style='margin-top: 15px; color: rgba(255,255,255,0.7);'>
            üíæ <b>–í –ø–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b> (–Ω–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)
            </p>
            </div>
            """)

            # Events
            init_btn.click(self.auto_load_ultimate_db, outputs=[init_status])
            unload_btn.click(self.unload_database, outputs=[init_status])

            ask_btn.click(
                self.ask_smart_question,
                inputs=[question_input],
                outputs=[answer_output, tools_output, memory_info]
            )
            question_input.submit(
                self.ask_smart_question,
                inputs=[question_input],
                outputs=[answer_output, tools_output, memory_info]
            )

            stats_btn.click(self.get_memory_stats, outputs=[stats_output])
            clear_btn.click(lambda: self.clear_memory(True), outputs=[stats_output])
            clear_all_btn.click(lambda: self.clear_memory(False), outputs=[stats_output])
            export_btn.click(self.export_history, outputs=[export_status, export_file])

        return interface


def main():
    agent = SmartQwenAgent()
    interface = agent.create_interface()

    print("="*70)
    print("üß† SMART RAG Agent 2025 - Gemma3 Function Calling")
    print("="*70)
    print("‚ú® –£–º–Ω—ã–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("üóÑÔ∏è –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Ultimate –±–∞–∑—ã (intfloat/multilingual-e5-large)")
    print("üíæ –í –ø–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    print("="*70)

    interface.launch(server_name="0.0.0.0", server_port=7861, share=False, show_error=True)


if __name__ == "__main__":
    main()
