"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å RAG —Å –ø–∞–º—è—Ç—å—é –∏ –º—É–ª—å—Ç–∏–±–∞–∑–∞–º–∏
"""

import gradio as gr
from rag_advanced_memory import AdvancedRAGMemory
import os
from pathlib import Path
from datetime import datetime

class AdvancedRAGInterface:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        project_dir = Path(__file__).parent
        self.DEFAULT_DB_PATH = project_dir / "chroma_db_kosmoenergy"
        self.DEFAULT_TEXT_FILE = r"C:\Users\PC\Downloads\consolidated_texts_20251014_235421_cleaned.txt"
        self.EMBEDDING_MODEL = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"

        self.rag = None
        self.is_initialized = False
        self.current_db_name = "–ö–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"

    def initialize_rag(
        self,
        text_file_path: str,
        db_name: str,
        max_short_memory: int,
        max_context_tokens: int,
        progress=gr.Progress()
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""

        if not text_file_path or not os.path.exists(text_file_path):
            return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å."

        try:
            project_dir = Path(__file__).parent
            db_path = project_dir / f"chroma_db_{db_name.lower().replace(' ', '_')}"

            progress(0, desc="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

            # –°–æ–∑–¥–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã
            self.rag = AdvancedRAGMemory(
                text_file_path=text_file_path,
                db_path=str(db_path),
                embedding_model=self.EMBEDDING_MODEL,
                max_short_memory=max_short_memory,
                max_context_tokens=max_context_tokens,
                summarize_threshold=int(max_context_tokens * 0.7),
                enable_auto_summarize=True,
                use_gpu=True
            )

            progress(0.2, desc="–ó–∞–≥—Ä—É–∑–∫–∞ embedding –º–æ–¥–µ–ª–∏...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
            if os.path.exists(str(db_path)):
                progress(0.4, desc="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î...")
                from langchain_community.vectorstores import Chroma
                self.rag.vectorstore = Chroma(
                    persist_directory=str(db_path),
                    embedding_function=self.rag.embeddings
                )
                status_msg = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞\nüìÅ –ü—É—Ç—å: {db_path}"
            else:
                progress(0.4, desc="–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                documents = self.rag.load_and_split_documents(
                    chunk_size=1000,
                    chunk_overlap=200
                )

                progress(0.6, desc="–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ GPU...")
                self.rag.create_vectorstore(documents, force_recreate=False)
                status_msg = f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å–æ–∑–¥–∞–Ω–∞\nüìÅ –ü—É—Ç—å: {db_path}\nüìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}"

            progress(0.8, desc="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio...")
            self.rag.setup_lm_studio_llm(model_name="google/gemma-3-27b")

            progress(0.9, desc="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ retriever...")
            self.rag.create_qa_chain(retriever_k=4)

            self.is_initialized = True
            self.current_db_name = db_name

            progress(1.0, desc="–ì–æ—Ç–æ–≤–æ!")

            return f"""‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!

{status_msg}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏:
- –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å: {max_short_memory} —Å–æ–æ–±—â–µ–Ω–∏–π
- –ú–∞–∫—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç: {max_context_tokens} —Ç–æ–∫–µ–Ω–æ–≤
- –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞

‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω —Å Gemma-3-27B!"""

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n{str(e)}"

    def ask_question(self, question, temperature, max_tokens, num_sources):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        if not self.is_initialized:
            return "‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É!", "", "", ""

        if not question.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!", "", "", ""

        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.rag.retriever.search_kwargs = {"k": num_sources}

            # –ó–∞–ø—Ä–æ—Å
            result = self.rag.query(
                question=question,
                max_tokens=int(max_tokens),
                temperature=temperature
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            answer = result['answer']

            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = ""
            for i, doc in enumerate(result['source_documents'], 1):
                sources += f"\n--- –ò—Å—Ç–æ—á–Ω–∏–∫ {i} ---\n"
                sources += doc.page_content[:400]
                if len(doc.page_content) > 400:
                    sources += "...\n"
                else:
                    sources += "\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
            stats = result['memory_stats']
            memory_info = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:
- –ù–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['short_memory_size']}
- –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {stats['long_memory_size']}
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['tokens_used']}/{stats['tokens_limit']}
- –ó–∞–≥—Ä—É–∑–∫–∞: {int(stats['tokens_used']/stats['tokens_limit']*100)}%"""

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç
            context = result.get('context', '')

            return answer, sources, memory_info, context

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            if "Connection" in str(e) or "connect" in str(e).lower():
                error_msg += "\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω!"
            return error_msg, "", "", ""

    def clear_memory(self, keep_summaries: bool):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"

        result = self.rag.clear_memory(keep_summaries=keep_summaries)
        return f"‚úÖ {result}"

    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!"

        stats = self.rag.get_memory_stats()
        return f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:

üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {stats['session_duration']}
üí¨ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}
üìù –í –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏: {stats['short_memory_count']}
üìö –í –¥–æ–ª–≥–æ–π –ø–∞–º—è—Ç–∏: {stats['long_memory_count']}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if stats['auto_summarize_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
- –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {stats['max_context_tokens']}
- –ü–æ—Ä–æ–≥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {stats['summarize_threshold']}

üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.current_db_name}
"""

    def export_history(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏"""
        if not self.is_initialized:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!", None

        filename = f"conversation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        project_dir = Path(__file__).parent
        filepath = project_dir / filename

        result = self.rag.export_conversation(str(filepath))

        return f"‚úÖ {result}", filepath

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        with gr.Blocks(title="Advanced RAG - –ö–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", theme=gr.themes.Soft()) as interface:

            gr.Markdown("""
            # üîÆ Advanced RAG Knowledge Base

            –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–∞ –∏ –∞–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π.

            ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
            - ‚úÖ –£–º–Ω–∞—è –ø–∞–º—è—Ç—å —Å –∞–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
            - ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ RTX 3090 (24GB) + 32GB RAM
            - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            - ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            - ‚úÖ –ú—É–ª—å—Ç–∏–±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            """)

            with gr.Tab("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"):
                gr.Markdown("""
                ### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

                **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:**
                1. –ó–∞–≥—Ä—É–∑–∫–∞ embedding –º–æ–¥–µ–ª–∏ –Ω–∞ GPU (~20 —Å–µ–∫)
                2. –ß—Ç–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                3. –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ChromaDB (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!)
                """)

                with gr.Row():
                    with gr.Column():
                        text_file_input = gr.Textbox(
                            label="üìÅ –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É",
                            value=self.DEFAULT_TEXT_FILE,
                            placeholder="C:\\–ø—É—Ç—å\\–∫\\—Ñ–∞–π–ª—É.txt"
                        )
                        db_name_input = gr.Textbox(
                            label="üìö –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                            value="–ö–æ—Å–º–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
                            placeholder="–ú–æ—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
                        )

                        with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏", open=False):
                            max_short_memory_slider = gr.Slider(
                                minimum=3,
                                maximum=10,
                                value=5,
                                step=1,
                                label="–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)"
                            )
                            max_context_tokens_slider = gr.Slider(
                                minimum=4000,
                                maximum=7000,
                                value=6000,
                                step=500,
                                label="–ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è Gemma-27B: 8192)"
                            )

                        init_btn = gr.Button("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É", variant="primary", size="lg")

                    with gr.Column():
                        init_status = gr.Textbox(
                            label="–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                            placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...",
                            lines=10,
                            interactive=False
                        )

            with gr.Tab("üí¨ –ß–∞—Ç"):
                with gr.Row():
                    with gr.Column(scale=2):
                        question_input = gr.Textbox(
                            label="–í–∞—à –≤–æ–ø—Ä–æ—Å",
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏—Ç—å –≤–∏–¥–µ–Ω–∏–µ –∞—É—Ä—ã?",
                            lines=3
                        )

                        with gr.Accordion("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", open=False):
                            temperature = gr.Slider(0.0, 1.0, 0.7, 0.1, label="Temperature")
                            max_tokens = gr.Slider(500, 4000, 2000, 100, label="Max tokens")
                            num_sources = gr.Slider(1, 10, 4, 1, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

                        ask_btn = gr.Button("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", variant="primary", size="lg")

                    with gr.Column(scale=3):
                        answer_output = gr.Textbox(
                            label="–û—Ç–≤–µ—Ç",
                            lines=15,
                            interactive=False
                        )

                with gr.Row():
                    with gr.Column():
                        memory_info_output = gr.Textbox(
                            label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏",
                            lines=5,
                            interactive=False
                        )

                with gr.Accordion("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", open=False):
                    sources_output = gr.Textbox(lines=10, interactive=False)

                with gr.Accordion("üîç –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", open=False):
                    context_output = gr.Textbox(lines=10, interactive=False)

            with gr.Tab("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é"):
                gr.Markdown("""
                ### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–∞

                **–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–ª–Ω–æ–º –≤–∏–¥–µ
                **–î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å:** –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                **–ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:** –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
                """)

                with gr.Row():
                    stats_btn = gr.Button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", size="lg")
                    clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∏)", size="lg")
                    clear_all_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å", variant="stop", size="lg")

                stats_output = gr.Textbox(
                    label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏",
                    lines=12,
                    interactive=False
                )

                gr.Markdown("---")

                with gr.Row():
                    export_btn = gr.Button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", size="lg")

                with gr.Row():
                    export_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞", lines=2)
                    export_file = gr.File(label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")

            gr.Markdown("""
            ---
            ### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
            - –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∑–≥–ª—è–¥ –¥–ª—è –≤–∏–¥–µ–Ω–∏—è –∞—É—Ä—ã?
            - –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è?
            - –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–∏–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–∞–º–∫—É
            - –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω—Ç—Ä–æ–≤?

            ### üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
            - **GPU:** RTX 3090 (24GB VRAM)
            - **RAM:** 32GB
            - **LLM:** Google Gemma-3-27B
            - **Context:** 8192 tokens
            - **Embedding:** GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π
            """)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            init_btn.click(
                fn=self.initialize_rag,
                inputs=[text_file_input, db_name_input, max_short_memory_slider, max_context_tokens_slider],
                outputs=[init_status]
            )

            ask_btn.click(
                fn=self.ask_question,
                inputs=[question_input, temperature, max_tokens, num_sources],
                outputs=[answer_output, sources_output, memory_info_output, context_output]
            )

            question_input.submit(
                fn=self.ask_question,
                inputs=[question_input, temperature, max_tokens, num_sources],
                outputs=[answer_output, sources_output, memory_info_output, context_output]
            )

            stats_btn.click(
                fn=self.get_stats,
                outputs=[stats_output]
            )

            clear_btn.click(
                fn=lambda: self.clear_memory(keep_summaries=True),
                outputs=[stats_output]
            )

            clear_all_btn.click(
                fn=lambda: self.clear_memory(keep_summaries=False),
                outputs=[stats_output]
            )

            export_btn.click(
                fn=self.export_history,
                outputs=[export_status, export_file]
            )

        return interface


def main():
    app = AdvancedRAGInterface()
    interface = app.create_interface()

    print("\n" + "="*70)
    print("–ó–∞–ø—É—Å–∫ Advanced RAG Web Interface...")
    print("="*70 + "\n")

    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )


if __name__ == "__main__":
    main()
